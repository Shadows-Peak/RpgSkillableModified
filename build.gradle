buildscript {
    repositories {
        maven { url 'https://files.minecraftforge.net/maven' }
        mavenCentral()
        maven { url 'https://modmaven.dev/' }
        maven {
            name "Sponge"
            url "https://repo.spongepowered.org/repository/maven-public/"
        }

        mavenLocal()
        maven { url = 'https://maven.parchmentmc.org' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7.+'
        classpath 'org.parchmentmc:librarian:1.+'
    }

}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = project.mod_version
group = 'com.github.dragoni7.rpgskillable'
archivesBaseName = "${modName}-forge-${minecraft_version}"
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
    mappings channel: 'official', version: '1.19.2'
    
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'rpgskillable'

            mods {
                rpgskillable {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'rpgskillable'

            mods {
                rpgskillable {
                    source sourceSets.main
                }
            }
        }
        
        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'rpgskillable'

            mods {
                rpgskillable {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'
            
            args '--mod', 'rpgskillable', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                rpgskillable {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }

    maven {
        name = "Iron's Maven - Release"
        url = "https://code.redspace.io/releases"
    }
    
    // feathers
    maven { url "https://www.cursemaven.com" }
    
    // ars nouveau
    maven { url 'https://maven.blamejared.com' }

    // curios
    maven { url = "https://maven.theillusivec4.top/" }

    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    mavenCentral()
    mavenLocal()
}

dependencies {

    minecraft "net.minecraftforge:forge:1.19.2-${forge_version}"
    compileOnly fg.deobf("curse.maven:feathers-699933:${feathers_version}")
    implementation fg.deobf("com.hollingsworth.ars_nouveau:ars_nouveau-${minecraft_version}:${arsnouveau_version}")
    compileOnly fg.deobf("io.redspace.ironsspellbooks:irons_spellbooks:${irons_spells_version}:api")
    runtimeOnly fg.deobf("io.redspace.ironsspellbooks:irons_spellbooks:${irons_spells_version}")
    implementation fg.deobf("top.theillusivec4.curios:curios-forge:1.19-${curios_version}")
    implementation fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")

    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "${project.modName}",
                "Specification-Vendor"    : "dragoni7",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : "${project.modName}",
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "dragoni7",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
